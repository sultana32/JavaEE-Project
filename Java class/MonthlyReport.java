package hasan.com.rashid;



import java.util.Properties;
 
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;


import javax.activation.DataHandler;
import javax.mail.Multipart;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMultipart;

import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import javax.mail.util.ByteArrayDataSource;
import javax.activation.DataSource;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;

import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;


public class MonthlyReport  {
	public void doReport(int uId,String name,String email,String link,String lang){
        
		// email sending preparation
        Properties props = new Properties();
        Session session = Session.getDefaultInstance(props, null);
        // give an unsubscirption link
        String htmlBody="Here is your transaction report. "+System.lineSeparator()+"Unsubscribe link:"+
        "http://1-dot-rashid-1048.appspot.com/unregisterconfirmunregister?key1="+ link+"&key2="+lang;
        ByteArrayOutputStream outputStream = null;
        
 
        try 
        {
            Message msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress("sultana.buet@gmail.com",
                    "ABC admin"));
            
            msg.addRecipient(Message.RecipientType.TO, new InternetAddress(email, "Mr. User"));
            msg.setSubject("Daily ABC report");
            Multipart mp = new MimeMultipart();

            MimeBodyPart htmlPart = new MimeBodyPart();
            htmlPart.setContent(htmlBody, "text/html");
            mp.addBodyPart(htmlPart);
          //now write the PDF content to the output stream
            outputStream = new ByteArrayOutputStream();
            writePdf(outputStream,uId,name);
            byte[] bytes = outputStream.toByteArray();
             
            //construct the pdf body part
            DataSource dataSource = new ByteArrayDataSource(bytes, "application/pdf");
            MimeBodyPart pdfBodyPart = new MimeBodyPart();
            pdfBodyPart.setDataHandler(new DataHandler(dataSource));
            pdfBodyPart.setFileName("ABC Report.pdf");
            
            mp.addBodyPart(pdfBodyPart);
            msg.setContent(mp);
            Transport.send(msg);
 
        } 
        catch (Exception e) 
        {
           
            throw new RuntimeException(e);
        }
 
       
    }
	
	
	public void writePdf(OutputStream outputStream,int uId,String name) throws Exception {
		Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,Font.BOLD);
		catFont.setColor(BaseColor.BLUE);
		 Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
		 MyModel reportModel=new MyModel();
		 //String userName=reportModel.userExist(1);
		 
		 DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	    
        Document document = new Document();
        PdfWriter.getInstance(document, outputStream);
         
        document.open();
         
        document.addTitle("ABC-Practice project");
        document.addSubject("Daily report");
        document.addKeywords("iText, email");
        document.addAuthor("Sultana Rashid");
        document.addCreator("Sultana Rashid");
        
        Paragraph preface = new Paragraph();
        preface.setIndentationLeft(50);
        // We add one empty line
        preface.add(new Paragraph(" "));
        // Lets write a big header
        preface.add(new Paragraph("Daily Report from ABC", catFont));

      
        // Will create: Report generated by: _name, _date
        //preface.add(new Paragraph(userName,smallBold));
        preface.add(new Paragraph(dateFormat.format(new Date()),smallBold));
        preface.add(new Paragraph(name, smallBold));
        preface.add(new Paragraph(" "));
        preface.add(new Paragraph(" "));
        preface.add(new Paragraph(" "));
        document.add(preface);
        
       
		PdfPTable table = new PdfPTable(4); // 4 columns.
		table.addCell("No");
		table.addCell("Type");
	    table.addCell("Amount");
		 table.addCell("Time");
		 
		 ArrayList<TransactionModel> myBalanceList=reportModel.giveTransaction(uId); // get transaction history of this user
		 if(myBalanceList.size()<=0) // no transaction of this user
		 {
			 	Paragraph paragraph = new Paragraph();
		        paragraph.add(new Chunk("You do not have any transaction yet."));
		        document.add(paragraph);
		 }
		 else  // put all history in pdf
		 {
			for(int i=0;i<myBalanceList.size();i++)
			 {
				        TransactionModel tran = new TransactionModel();
						tran=myBalanceList.get(i);
					 
					PdfPCell cell1 = new PdfPCell(new Paragraph(String.valueOf(i+1)));
			        PdfPCell cell2 = new PdfPCell(new Paragraph(tran.getType()));
			        PdfPCell cell3 = new PdfPCell(new Paragraph(String.valueOf(tran.getAmount())));
			        PdfPCell cell4 = new PdfPCell(new Paragraph(tran.getDate().toString()));
			       
			        table.addCell(cell1);	
			        table.addCell(cell2);
			        table.addCell(cell3);
			        table.addCell(cell4);
			        
			 } 

        document.add(table);
		 }
         
        Paragraph paragraph = new Paragraph();
        paragraph.add(new Chunk("Thanks a lot for testing my project.Hope to hear from you soon"));
        document.add(paragraph);
         
        document.close();
    }
     
}
